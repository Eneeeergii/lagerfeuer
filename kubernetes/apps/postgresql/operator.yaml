apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: postgres-operator
    app.kubernetes.io/name: postgres-operator
  name: postgres-operator
  namespace: ${POSTGRESQL_NAMESPACE}
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: postgres-operator
      app.kubernetes.io/name: postgres-operator
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/config: e38ec065cc1f4e53656d24482dc35b4d1fe560223a35235a532cdb3bea3cb36a
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: postgres-operator
        app.kubernetes.io/name: postgres-operator
    spec:
      affinity: {}
      containers:
      - env:
        - name: POSTGRES_OPERATOR_CONFIGURATION_OBJECT
          value: postgres-operator
        image: ghcr.io/zalando/"${POSTGRESQL_OPERATOR_VERSION}"
        imagePullPolicy: IfNotPresent
        name: postgres-operator
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /readyz
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: 500m
            memory: 500Mi
          requests:
            cpu: 100m
            memory: 250Mi
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: postgres-operator
      serviceAccountName: postgres-operator
      terminationGracePeriodSeconds: 30